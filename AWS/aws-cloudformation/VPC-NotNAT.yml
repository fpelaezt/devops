AWSTemplateFormatVersion: "2010-09-09"

Description: This template create a VPC + 2 Public Subnet in differents AZ + 2 Private Subnet + 1 IGW + 1 PublicRoute + 1 PrivateRoute 
 + their corresponding SubnetRouteTableAssociation + ExportParameters

Parameters:
  Environment:
    Description: Define the Environment
    Type: String
    Default: Development
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    MinLength: 5
    MaxLength: 12
    ConstraintDescription: Name must start with a letter and followed by any letter or number, minimum lenght 5 and maximun lenght 12
  VPCName:
    Description: Define the VPCName
    Type: String
    Default: DevOps01
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    MinLength: 5
    MaxLength: 12
    ConstraintDescription: Name must start with a letter and followed by any letter or number, minimum lenght 5 and maximun lenght 12
  VPCCIDR:
    Description: Define CIDR
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  PublicSubnet1CIDR:
    Description: Define CIDR for PublicSubnet1
    Type: String
    Default: 10.0.0.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  PublicSubnet2CIDR:
    Description: Define CIDR for PublicSubnet2
    Type: String
    Default: 10.0.1.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  PrivateSubnet1CIDR:
    Description: Define CIDR for PublicSubnet2
    Type: String
    Default: 10.0.10.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  PrivateSubnet2CIDR:
    Description: Define CIDR for PublicSubnet2
    Type: String
    Default: 10.0.11.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      -
        Key: Name
        Value: !Ref VPCName
      - 
        Key: Environment
        Value: !Ref Environment
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ''] #Comment: Get first AZ
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} PublicSubnet1 AZ1 #Comment: Substitutes parameter inside ${}
      VpcId: !Ref myVPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ''] #Comment: Get second AZ
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} PublicSubnet1 AZ2
      VpcId: !Ref myVPC
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} PrivateSubnet1 AZ1
      VpcId: !Ref myVPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} PrivateSubnet2 AZ2
      VpcId: !Ref myVPC
  PublicRoute:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} PublicRoute
  Private1Route:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} Private1Route
  Private2Route:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} Private2Route
  Public1RouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRoute
      SubnetId: !Ref PublicSubnet1
  Public2RouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRoute
      SubnetId: !Ref PublicSubnet2
  Private1RouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref Private1Route
      SubnetId: !Ref PrivateSubnet1
  Private2RouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref Private2Route
      SubnetId: !Ref PrivateSubnet2
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      -
        Key: Name
        Value: !Sub ${Environment} IGW
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref myVPC
  Route2IGW:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRoute

Outputs:
  VPCID: 
    Description: A reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
  VPCCIDR:
    Description: CIDR of the VPC
    Value: !GetAtt myVPC.CidrBlock #Comment: Get attribute
  AZPublicSubnet1:
    Description: AZ of the PublicSubnet1
    Value: !GetAtt PublicSubnet1.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZPublicSubnet1
  PublicSubnet1:
    Description: SubnetId of PublicSubnet1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
  IGWID: 
    Description: A reference to the IGW
    Value: !Ref IGW
